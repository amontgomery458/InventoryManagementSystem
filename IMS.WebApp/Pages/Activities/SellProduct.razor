@page "/sell"
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent;

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@inject IJSRuntime JSRuntime


@attribute [Authorize(Policy = "Sales")]

<h3>Sell Product</h3>
<br />

<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Sales Order #</label>
        <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Sell"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>
                <input type="hidden" value="@sellViewModel.ProductId" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="price">Unit Price </label>
        <InputNumber id="qty" @bind-Value="sellViewModel.UnitPrice" class="form-control"></InputNumber>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Sell</button>


</EditForm>

@code {
    private AuthenticationState? authenticationState;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private SellViewModel sellViewModel = new SellViewModel();
    private Product? selectedProduct = null;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
            authenticationState = await authenticationStateTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmission", "sell-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        sellViewModel.ProductId = item.Id;
        sellViewModel.Product = this.selectedProduct;
        sellViewModel.UnitPrice = this.selectedProduct.Price;

    }

    private async Task  Sell()
    {
        if (this.sellViewModel.Product != null &&
           authenticationState != null &&
           !string.IsNullOrWhiteSpace(authenticationState.User?.Identity?.Name)
        )
        {

            await SellProductUseCase.ExecuteAsync(
                this.sellViewModel.SalesOrderNumber,
                this.sellViewModel.Product,
                this.sellViewModel.QuantityToSell,
                this.sellViewModel.UnitPrice,
                authenticationState.User.Identity.Name
            );
        }

        this.sellViewModel = new SellViewModel();
        this.selectedProduct = null;
    }
}
